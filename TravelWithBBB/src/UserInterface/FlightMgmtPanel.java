/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import Business.Components.Flight;
import Business.Components.Ticket;
import Business.Users.Airline;
import java.awt.CardLayout;
import java.awt.Color;
import java.text.DateFormat;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.time.LocalDate;
import java.time.ZoneId;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.Iterator;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author pavanrao
 */
public class FlightMgmtPanel extends javax.swing.JPanel {

    /**
     * Creates new form FlightMgmtPanel
     */
    JPanel userProcessContainer;
    Airline airline;
    FlightMgmtPanel(JPanel userProcessContainer, Airline airline) {
        this.userProcessContainer = userProcessContainer;
        this.airline = airline;
        initComponents();
        populateTable();
        labelWelcomeAirline.setText("Welcome, "+airline.getName());
        btnSaveFlight.setEnabled(false);
        btnCancel.setEnabled(false);
        enableInputFields();
        setDatePlaceholders();
    }
    
    private ArrayList<String> checkDateInput(String date, String typeOfDate,ArrayList<String> messageLog) {
        String isoDatePattern = "MM-dd-yyyy HH:mm:ss";
        SimpleDateFormat simpleDateFormat = new SimpleDateFormat(isoDatePattern);
        Date dateNew = null;
        try{
           simpleDateFormat.parse(date);
           String[] inputDate = date.split("-");
           int day = Integer.parseInt(inputDate[0]);
           int month = Integer.parseInt(inputDate[1]);
           if(day>31 || month>12) {
               messageLog.add("Enter a valid "+typeOfDate);
           }
           return messageLog;
        }catch(ParseException e){
           messageLog.add("Enter a valid "+typeOfDate);
        }
        finally {
            return messageLog;
        }
    }
    
    private Boolean validGreaterDatesCheck(String dateOne, String dateTwo) {
        SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
        
        Date date1 = null;
        try {
            date1 = sdf.parse(dateOne);
        } catch (ParseException ex) {
            Logger.getLogger(FlightMgmtPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
        Date date2 = null;
        try {
            date2 = sdf.parse(dateTwo);
        } catch (ParseException ex) {
            Logger.getLogger(FlightMgmtPanel.class.getName()).log(Level.SEVERE, null, ex);
        }

        //date1: arrival, date2: departure
        if (date1.compareTo(date2) < 0) {
            return false;
        }
        else if (date1.compareTo(date2) == 0) {
            return false;
        }
        else {
            return true;
        }
    }
    
    private void setDatePlaceholders() {
        txtArrivalDate.setText("MM-dd-yyyy HH:mm:ss");
        txtDepartureDate.setText("MM-dd-yyyy HH:mm:ss");   
    }
    
    private void enableInputFields() {
        txtFrom.setEnabled(true);
        txtTo.setEnabled(true);
        txtArrivalDate.setEnabled(true);
        txtDepartureDate.setEnabled(true);
        txtPrice.setEnabled(true);
    }
    
    private void disableInputFields() {
        txtFrom.setEnabled(false);
        txtTo.setEnabled(false);
        txtArrivalDate.setEnabled(false);
        txtDepartureDate.setEnabled(false);
        txtPrice.setEnabled(false);
    }
    
    private void clearInputFields() {
        txtFrom.setText("");
        txtTo.setText("");
        txtArrivalDate.setText("");
        txtDepartureDate.setText("");
        txtPrice.setText("");
        setDatePlaceholders();
    }

    private void populateTable() {
        DefaultTableModel dtm = (DefaultTableModel)tableFlightList.getModel();
        dtm.setRowCount(0);
        for(Flight flight: airline.getFlightDirectory().getFlightList()) {
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=flight.getFrom();
            row[1]=flight.getTo();
            row[2]=flight.getArrival();
            row[3]=flight;
            row[4]=flight.getPrice();
            dtm.addRow(row);
        }
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tableFlightList = new javax.swing.JTable();
        btnCreateFlight = new javax.swing.JButton();
        btnManageFlight = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        txtTo = new javax.swing.JTextField();
        txtArrivalDate = new javax.swing.JTextField();
        txtDepartureDate = new javax.swing.JTextField();
        btnSaveFlight = new javax.swing.JButton();
        btnDelete = new javax.swing.JButton();
        labelWelcomeAirline = new javax.swing.JLabel();
        btnCancel = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();
        txtPrice = new javax.swing.JTextField();

        jLabel1.setText("MANAGE YOUR FLIGHTS");

        tableFlightList.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "From", "To", "Arrival Date", "Departure Date", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableFlightList);
        if (tableFlightList.getColumnModel().getColumnCount() > 0) {
            tableFlightList.getColumnModel().getColumn(0).setResizable(false);
            tableFlightList.getColumnModel().getColumn(1).setResizable(false);
            tableFlightList.getColumnModel().getColumn(2).setResizable(false);
            tableFlightList.getColumnModel().getColumn(3).setResizable(false);
            tableFlightList.getColumnModel().getColumn(4).setResizable(false);
        }

        btnCreateFlight.setText("CREATE A FLIGHT");
        btnCreateFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCreateFlightActionPerformed(evt);
            }
        });

        btnManageFlight.setText("MANAGE THE FLIGHT");
        btnManageFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnManageFlightActionPerformed(evt);
            }
        });

        jLabel2.setText("From");

        jLabel3.setText("To");

        jLabel4.setText("Arrival Date");

        jLabel5.setText("Departure Date");

        txtArrivalDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtArrivalDateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtArrivalDateFocusLost(evt);
            }
        });

        txtDepartureDate.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                txtDepartureDateFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDepartureDateFocusLost(evt);
            }
        });

        btnSaveFlight.setText("SAVE");
        btnSaveFlight.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveFlightActionPerformed(evt);
            }
        });

        btnDelete.setText("DELETE THE FLIGHT");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnCancel.setText("CANCEL");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        jLabel6.setText("Price");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 709, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(278, 278, 278)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 187, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelWelcomeAirline, javax.swing.GroupLayout.PREFERRED_SIZE, 274, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(365, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(44, 44, 44)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel6)
                    .addComponent(jLabel3)
                    .addComponent(jLabel2)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtFrom)
                    .addComponent(txtTo)
                    .addComponent(txtArrivalDate)
                    .addComponent(txtDepartureDate, javax.swing.GroupLayout.DEFAULT_SIZE, 195, Short.MAX_VALUE)
                    .addComponent(txtPrice))
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(15, 15, 15)
                        .addComponent(btnCreateFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(12, 12, 12)
                        .addComponent(btnManageFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 189, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnSaveFlight, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnCancel)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(labelWelcomeAirline, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 213, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(54, 54, 54)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(21, 21, 21)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(22, 22, 22)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtArrivalDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(28, 28, 28)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(txtDepartureDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnCreateFlight)
                        .addGap(21, 21, 21)
                        .addComponent(btnManageFlight)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(65, 65, 65)
                                .addComponent(btnDelete))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnSaveFlight)
                                    .addComponent(btnCancel))))))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtPrice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(112, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private ArrayList<String> flightinputValidation(ArrayList<String> messageLog) {
        String arrDate = txtArrivalDate.getText();
        String depDate = txtDepartureDate.getText();
        String from = txtFrom.getText();
        String to = txtTo.getText();
        
        String price = txtPrice.getText();
        Double prodPrice = 0.0;
        if(price.isEmpty()) {
            messageLog.add("Enter valid price");
        }
        else {
            try {
                Double.parseDouble(price);
                prodPrice = Double.parseDouble(price);
            } 
            catch (NumberFormatException e) {
                messageLog.add(price + " is not a valid number.");
            }
        }
        
        if(from.isEmpty()) {
            messageLog.add("Enter valid From Location");
        }
        if(to.isEmpty()) {
            messageLog.add("Enter valid To Location");
        }
        if(arrDate.isEmpty() || arrDate.equals("MM-dd-yyyy HH:mm:ss")) {
            messageLog.add("Enter valid Arrival Date");
        }
        else {
            messageLog = checkDateInput(arrDate, "Arrival Date", messageLog);
        }
        if(depDate.isEmpty() || depDate.equals("MM-dd-yyyy HH:mm:ss")) {
            messageLog.add("Enter valid Departure Date");
        }
        else {
            messageLog = checkDateInput(depDate, "Departure Date", messageLog);
        }
        if((!arrDate.isEmpty() && !arrDate.equals("MM-dd-yyyy HH:mm:ss")) && 
           (!depDate.isEmpty() && !depDate.equals("MM-dd-yyyy HH:mm:ss"))) {
            if(!validGreaterDatesCheck(arrDate, depDate))
            messageLog.add("Please enter the arrival date that is after your departure!");
        }
        return messageLog;
    }
    
    private void btnCreateFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCreateFlightActionPerformed
        // TODO add your handling code here:
        ArrayList<String> messageLog = new ArrayList<>();
        Flight flight = new Flight();
        messageLog = flightinputValidation(messageLog);
        if(!messageLog.isEmpty()) {
            String errorLog="";
            for(String message: messageLog)
            errorLog+=message+"\n";
            JOptionPane.showMessageDialog(null,errorLog);
        }
        else {
            flight.setArrival(txtArrivalDate.getText());
            flight.setDeparture(txtDepartureDate.getText());
            flight.setFrom(txtFrom.getText());
            flight.setTo(txtTo.getText());
            flight.setPrice(Double.parseDouble(txtPrice.getText()));
            airline.getFlightDirectory().getFlightList().add(flight);
            JOptionPane.showMessageDialog(null, "Flight created successfully");
            populateTable();
            clearInputFields();
        }
    }//GEN-LAST:event_btnCreateFlightActionPerformed

    private void btnManageFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnManageFlightActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableFlightList.getSelectedRow();
        if(selectedRow>=0){
            enableInputFields();
            Flight flight = (Flight)tableFlightList.getValueAt(selectedRow, 3);
            txtFrom.setText(flight.getFrom());
            txtTo.setText(flight.getTo());
            txtDepartureDate.setText(flight.getDeparture());
            txtArrivalDate.setText(flight.getArrival());
            txtPrice.setText(Double.toString(flight.getPrice()));
            btnSaveFlight.setEnabled(true);
            btnCancel.setEnabled(true);
            btnManageFlight.setEnabled(false);
            btnCreateFlight.setEnabled(false);
            btnDelete.setEnabled(false);
        }
        else {
            JOptionPane.showMessageDialog(null, "Please select a flight first!");
        }
    }//GEN-LAST:event_btnManageFlightActionPerformed

    private void btnSaveFlightActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveFlightActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableFlightList.getSelectedRow();
        ArrayList<String> messageLog = new ArrayList<>();
        messageLog = flightinputValidation(messageLog);
        if(!messageLog.isEmpty()) {
            String errorLog="";
            for(String message: messageLog)
            errorLog+=message+"\n";
            JOptionPane.showMessageDialog(null,errorLog);
        }
        else {
            if(selectedRow>=0){
                Flight flight = (Flight)tableFlightList.getValueAt(selectedRow, 3);
                for(Flight fl: airline.getFlightDirectory().getFlightList()) {
                    if(fl.equals(flight)) {
                        fl.setFrom(txtFrom.getText());
                        fl.setTo(txtTo.getText());
                        fl.setArrival(txtArrivalDate.getText());
                        fl.setDeparture(txtDepartureDate.getText());
                        flight.setPrice(Double.parseDouble(txtPrice.getText()));
                    }
                }
                populateTable();
                btnManageFlight.setEnabled(true);
                btnCreateFlight.setEnabled(true);
                btnDelete.setEnabled(true);
                btnSaveFlight.setEnabled(false);
                btnCancel.setEnabled(false);
            }
        }
    }//GEN-LAST:event_btnSaveFlightActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        // TODO add your handling code here:
        int selectedRow = tableFlightList.getSelectedRow();
        if(selectedRow >= 0) {
            int selectedOption = JOptionPane.showConfirmDialog(null, 
                                  "Are you sure you want to delete this flight and all the booked tickets in it?", 
                                  "Choose",
                                  JOptionPane.YES_NO_OPTION);
            if(selectedOption== JOptionPane.YES_OPTION) {                
                Flight flight = (Flight)tableFlightList.getValueAt(selectedRow, 3);
                ArrayList<Ticket> ticketList = Business.BusinessUtils.getTicketDirectory().getTicketList();

                List<Ticket> list;
                list = Collections.synchronizedList(new ArrayList<Ticket>());
                synchronized(list) {
                    Iterator<Ticket> iter = list.iterator();
                    while (iter.hasNext()) { 
                        Ticket t = iter.next();
                        if(t.getFlight().equals(flight)) {
                            ticketList.remove(t);
                        }
                    } 
                }
                ArrayList<Flight> flightList = airline.getFlightDirectory().getFlightList();
                flightList.remove(flight);
                populateTable();
            }
        }
        else {
            JOptionPane.showMessageDialog(null, "Please select a flight first!");
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        clearInputFields();
        btnManageFlight.setEnabled(true);
        btnSaveFlight.setEnabled(false);
        btnCancel.setEnabled(false);
        btnCreateFlight.setEnabled(true);
        btnDelete.setEnabled(true);
    }//GEN-LAST:event_btnCancelActionPerformed

    private void txtArrivalDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtArrivalDateFocusGained
        // TODO add your handling code here:
        if(txtArrivalDate.getText().equals("MM-dd-yyyy HH:mm:ss")) {
            txtArrivalDate.setText("");   
        }
    }//GEN-LAST:event_txtArrivalDateFocusGained

    private void txtDepartureDateFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDepartureDateFocusGained
        // TODO add your handling code here:
        if(txtDepartureDate.getText().equals("MM-dd-yyyy HH:mm:ss")) {
            txtDepartureDate.setText("");
        }
    }//GEN-LAST:event_txtDepartureDateFocusGained

    private void txtArrivalDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtArrivalDateFocusLost
        // TODO add your handling code here:
        if(txtArrivalDate.getText().isEmpty()) {
            txtArrivalDate.setText("MM-dd-yyyy HH:mm:ss");
        }
    }//GEN-LAST:event_txtArrivalDateFocusLost

    private void txtDepartureDateFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDepartureDateFocusLost
        // TODO add your handling code here:
        if(txtDepartureDate.getText().isEmpty()) {
            txtDepartureDate.setText("MM-dd-yyyy HH:mm:ss");
        }
    }//GEN-LAST:event_txtDepartureDateFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnCreateFlight;
    private javax.swing.JButton btnDelete;
    private javax.swing.JButton btnManageFlight;
    private javax.swing.JButton btnSaveFlight;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelWelcomeAirline;
    private javax.swing.JTable tableFlightList;
    private javax.swing.JTextField txtArrivalDate;
    private javax.swing.JTextField txtDepartureDate;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtPrice;
    private javax.swing.JTextField txtTo;
    // End of variables declaration//GEN-END:variables
}
