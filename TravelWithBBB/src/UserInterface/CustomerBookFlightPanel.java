/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package UserInterface;

import javax.swing.table.DefaultTableModel;
import Business.Components.AirlineDirectory;
import Business.Components.Flight;
import Business.Users.Airline;
import Business.BusinessUtils;
import Business.Components.Seat;
import Business.Components.Ticket;
import Business.Users.Customer;
import java.awt.CardLayout;
import java.awt.Component;
import java.awt.GridLayout;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.Set;
import javax.swing.AbstractButton;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JToggleButton;
import javax.swing.UIManager;

/**
 *
 * @author apple
 */
public class CustomerBookFlightPanel extends javax.swing.JPanel {

    /**
     * Creates new form CustomerBookFlightPanel
     */
    int x = -1, y = -1;
    int rows = 10;
    int columns = 3;
    JFrame frame = new JFrame("JToggleButton Test");
    JPanel panel = new JPanel(new GridLayout(columns, rows));
    
    private AirlineDirectory arlineList;
    private JPanel userProcessContainer;
    private Customer customer;
    CustomerBookFlightPanel(JPanel userProcessContainer, Customer customer) {
        initComponents();
        this.userProcessContainer=userProcessContainer;
        this.customer=customer;
        arlineList=BusinessUtils.getAirlineDirectory();
        populateTable();
    }
    
    
    
    public void populateTable(){
        DefaultTableModel dtm=(DefaultTableModel) tblFlights.getModel();
        dtm.setRowCount(0);
        for(Airline airline:arlineList.getAirlineList()){
            Object[] row=new Object[5];
            row[0]=airline;
            for(Flight flight:airline.getFlightDirectory().getFlightList()){
                row[1]=flight.getFrom();
                row[2]=flight.getTo();
                row[3]=flight;
                row[4]=flight.getArrival();
                dtm.addRow(row);
            }
        }
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblFlights = new javax.swing.JTable();
        btnBack = new javax.swing.JButton();
        lblAirplane = new javax.swing.JLabel();
        txtAirplane = new javax.swing.JTextField();
        lblFrom = new javax.swing.JLabel();
        txtFrom = new javax.swing.JTextField();
        lblTo = new javax.swing.JLabel();
        txtTo = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnSelectConfirm = new javax.swing.JButton();
        lblTo1 = new javax.swing.JLabel();
        txtDeparture = new javax.swing.JTextField();
        btnReset = new javax.swing.JButton();
        lblArrival = new javax.swing.JLabel();
        txtArrival = new javax.swing.JTextField();

        setPreferredSize(new java.awt.Dimension(800, 1500));

        tblFlights.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Airline Name", "From", "To", "Departure Date", "Arrival Date"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tblFlights);
        if (tblFlights.getColumnModel().getColumnCount() > 0) {
            tblFlights.getColumnModel().getColumn(0).setResizable(false);
            tblFlights.getColumnModel().getColumn(1).setResizable(false);
            tblFlights.getColumnModel().getColumn(2).setResizable(false);
            tblFlights.getColumnModel().getColumn(3).setResizable(false);
            tblFlights.getColumnModel().getColumn(4).setResizable(false);
        }

        btnBack.setText("Back");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        lblAirplane.setText("Airplane");

        lblFrom.setText("From");

        lblTo.setText("To");

        btnSearch.setText("Search Results");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnSelectConfirm.setText("Proceed to seat selection");
        btnSelectConfirm.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSelectConfirmActionPerformed(evt);
            }
        });

        lblTo1.setText("Departure Date");

        btnReset.setText("Reset Filters");
        btnReset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetActionPerformed(evt);
            }
        });

        lblArrival.setText("Arrival Date");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(btnBack)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 114, Short.MAX_VALUE)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 541, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(192, 192, 192)
                                .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(lblAirplane)
                                        .addComponent(lblFrom)
                                        .addComponent(lblTo1)
                                        .addComponent(lblArrival))
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(18, 18, 18)
                                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                                .addComponent(txtAirplane, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                                                .addComponent(txtArrival)
                                                .addComponent(txtDeparture, javax.swing.GroupLayout.Alignment.TRAILING)))
                                        .addGroup(layout.createSequentialGroup()
                                            .addGap(17, 17, 17)
                                            .addComponent(txtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                    .addComponent(lblTo)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnReset, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 124, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnSelectConfirm, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 194, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(73, 73, 73))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(43, 43, 43)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnBack)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 247, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(22, 22, 22)
                        .addComponent(btnReset))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(lblAirplane)
                            .addComponent(txtAirplane, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(txtFrom, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(lblFrom))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSelectConfirm, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTo)
                    .addComponent(txtTo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(9, 9, 9)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTo1)
                    .addComponent(txtDeparture, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtArrival, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblArrival))
                .addGap(28, 28, 28)
                .addComponent(btnSearch)
                .addGap(1021, 1021, 1021))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSelectConfirmActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSelectConfirmActionPerformed
        // TODO add your handling code here:
//        Ticket ticket=new Ticket();
//        Seat seat=new Seat();
//        seat.setX(x);
//        seat.setY(y);
        Flight flight = null;Airline airline = null;
        int selectedRow=tblFlights.getSelectedRow();
        if(selectedRow < 0){
            JOptionPane.showMessageDialog(null, "Please select a row from the table to view details!!","Warning",JOptionPane.WARNING_MESSAGE);
            return;
        }else{
//             if(x==-1 && y==-1){
//                 JOptionPane.showMessageDialog(null, "Please select the seats!");
//             }else{
                flight=(Flight) tblFlights.getValueAt(selectedRow,3);
                airline=(Airline) tblFlights.getValueAt(selectedRow, 0);
//                ticket.setFlight(flight);
//                ticket.setAirline(airline);
//                ticket.setSeat(seat);
//                ticket.setCustomer(customer);
//                BusinessUtils.getTicketDirectory().addTicket(ticket);
//                JOptionPane.showMessageDialog(null, "Booking was successfull!");
             }
        
        BookTheFlightPanel panel=new BookTheFlightPanel(userProcessContainer,customer,flight,airline); 
        userProcessContainer.add("BookTheFlightPanel",panel);
        CardLayout layout=(CardLayout) userProcessContainer.getLayout();
        layout.next(userProcessContainer);
    }//GEN-LAST:event_btnSelectConfirmActionPerformed

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        userProcessContainer.remove(this);
        CardLayout layout = (CardLayout) userProcessContainer.getLayout();
        layout.previous(userProcessContainer);
    }//GEN-LAST:event_btnBackActionPerformed

    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        DefaultTableModel dtm=(DefaultTableModel) tblFlights.getModel();
        dtm.setRowCount(0);
        Object[] row=new Object[5];
        
        ArrayList<Object[]> toDisplay = new ArrayList<Object[]>();
        Set<String> setAirline=new HashSet<String>();
        Set<String> setFrom=new HashSet<String>();
        Set<String> setTo=new HashSet<String>();
        Set<String> setDeparture=new HashSet<String>();
        Set<String> setArrival=new HashSet<String>();
        
        if(txtAirplane.getText().equals("") && txtDeparture.getText().equals("") && txtFrom.getText().equals("") && txtTo.getText().equals("") && txtArrival.getText().equals("")){
            JOptionPane.showMessageDialog(null, "Please enter any of the values");
        }
         
         for(Airline airline : arlineList.getAirlineList()){
             setAirline.add(airline.getName().toLowerCase());
         }
         
          for(Airline airline:arlineList.getAirlineList()){
              for(Flight f:airline.getFlightDirectory().getFlightList()){
                  setFrom.add(f.getFrom().toLowerCase());
                  setTo.add(f.getTo().toLowerCase());
                  setDeparture.add(f.getDeparture().toLowerCase());
                  setArrival.add(f.getArrival().toLowerCase());
              }
          }
          
          if(!txtAirplane.getText().equals("")){
               if(!setAirline.contains(txtAirplane.getText().toLowerCase())){
               JOptionPane.showMessageDialog(null, "Airline is not present");
               txtAirplane.setText("");
               txtDeparture.setText("");
               txtFrom.setText("");
               txtTo.setText("");
               txtArrival.setText("");
               populateTable();
               return;
          }
         }
          
         if(!txtFrom.getText().equals("")){
             if(!setFrom.contains(txtFrom.getText().toLowerCase())){
                JOptionPane.showMessageDialog(null, "There are no flights available from this place! Sorry!");
                txtFrom.setText("");
                txtDeparture.setText("");
                txtFrom.setText("");
                txtTo.setText("");
                txtArrival.setText("");
                populateTable();
                return;
          }
         }
         
         if(!txtTo.getText().equals("")){
             if(!setTo.contains(txtTo.getText().toLowerCase())){
                JOptionPane.showMessageDialog(null, "There are no flights available to this place! Sorry!");
                txtTo.setText("");
                txtAirplane.setText("");
                txtDeparture.setText("");
                txtFrom.setText("");
                txtArrival.setText("");
                populateTable();
                return;
          }
         }
         
         if(!txtDeparture.getText().equals("")){
             if(!setDeparture.contains(txtDeparture.getText().toLowerCase())){
                JOptionPane.showMessageDialog(null, "There are no flights available at this date! Sorry!");
                txtDeparture.setText("");
                populateTable();
                txtTo.setText("");
                txtAirplane.setText("");
                txtDeparture.setText("");
                txtFrom.setText("");
                txtArrival.setText("");
                return;
          }
         }
         
         if(!txtArrival.getText().equals("")){
             if(!setArrival.contains(txtArrival.getText().toLowerCase())){
                JOptionPane.showMessageDialog(null, "There are no flights available at this date! Sorry!");
                txtDeparture.setText("");
                populateTable();
                txtTo.setText("");
                txtAirplane.setText("");
                txtDeparture.setText("");
                txtFrom.setText("");
                txtArrival.setText("");
                return;
          }
         }
         
            for(Airline airline : arlineList.getAirlineList()){
                for(Flight f: airline.getFlightDirectory().getFlightList()){
                    int count=0;
                    if(!txtAirplane.getText().equals("")){
                        if(!txtAirplane.getText().toLowerCase().equals(airline.getName().toLowerCase())){
                            continue;
                        }
                    }
                    if(!txtFrom.getText().equals("")){
                        if(!txtFrom.getText().toLowerCase().equals(f.getFrom().toLowerCase())){
                            continue;
                        }
                    }
                    if(!txtTo.getText().equals("")){
                        if(!txtTo.getText().toLowerCase().equals(f.getTo().toLowerCase())){
                           continue;
                        }
                    }
                    if(!txtDeparture.getText().equals("")){
                        if(!txtDeparture.getText().toLowerCase().equals(f.getDeparture().toLowerCase())){
                            continue;
                        }
                    }
                    if(!txtArrival.getText().equals("")){
                        if(!txtArrival.getText().toLowerCase().equals(f.getArrival().toLowerCase())){
                            continue;
                        }
                    }
                  
                    row[0]=airline;
                    row[1]=f.getFrom();
                    row[2]=f.getTo();
                    row[3]=f;
                    row[4]=f.getArrival();
                    dtm.addRow(row);
            }
        }
        
        txtAirplane.setText("");
        txtDeparture.setText("");
        txtFrom.setText("");
        txtTo.setText("");
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetActionPerformed
        // TODO add your handling code here:
        populateTable();
        txtAirplane.setText("");
        txtDeparture.setText("");
        txtFrom.setText("");
        txtTo.setText("");
    }//GEN-LAST:event_btnResetActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnReset;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSelectConfirm;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblAirplane;
    private javax.swing.JLabel lblArrival;
    private javax.swing.JLabel lblFrom;
    private javax.swing.JLabel lblTo;
    private javax.swing.JLabel lblTo1;
    private javax.swing.JTable tblFlights;
    private javax.swing.JTextField txtAirplane;
    private javax.swing.JTextField txtArrival;
    private javax.swing.JTextField txtDeparture;
    private javax.swing.JTextField txtFrom;
    private javax.swing.JTextField txtTo;
    // End of variables declaration//GEN-END:variables
}
