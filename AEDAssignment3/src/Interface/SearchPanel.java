/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package Interface;

import Business.Car;
import java.awt.CardLayout;
import java.util.ArrayList;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author pavanrao
 */
public class SearchPanel extends javax.swing.JPanel {

    /**
     * Creates new form SearchPanel
     */
    private List<Car> carList;
    private JPanel carContainer;
    private List<Car> filteredCarList;
    private List<Car> copyOfCarList;

    SearchPanel(List<Car> carList, JPanel carContainer) {
            initComponents();
            this.carContainer = carContainer;
            this.carList = carList;
            populate();
            filteredCarList = new ArrayList<Car>();
            btnSearch.setEnabled(false);
            txtFilter3.setEnabled(false);
            txtComments.setEnabled(false);
            txtComments.setEditable(false);
    }

    public void populate(){
        DefaultTableModel dtm = (DefaultTableModel)tableCarFleet.getModel();
        dtm.setRowCount(0);
        
        for(Car car : carList){
            Object[] row = new Object[dtm.getColumnCount()];
            row[0]=car;
            row[1]=car.getManufactured_year();
            row[2]=car.getMin_seats();
            row[3]=car.getMax_seats();
            row[4]=car.getSerial_num();
            row[5]=car.getModel_num();
            row[6]=car.getAvailble_city();
            if(car.isMaintenance_certificate()){
                row[7]="Active";
            }
            else
                row[7]="Expired";
            if(car.isAvailable()) {
                row[8] = "yes";
            }
            else
                row[8] ="no";
            dtm.addRow(row);
        }
        copyOfCarList = carList;
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tableCarFleet = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnBack = new javax.swing.JButton();
        labelComments = new javax.swing.JLabel();
        txtComments = new javax.swing.JTextField();
        filter3 = new javax.swing.JComboBox<>();
        txtFilter3 = new javax.swing.JTextField();
        btnSearch = new javax.swing.JButton();
        btnClearFilter = new javax.swing.JButton();
        btnBrand = new javax.swing.JButton();
        btnYear = new javax.swing.JButton();
        btnSerialNo = new javax.swing.JButton();
        txtBrand = new javax.swing.JTextField();
        txtYear = new javax.swing.JTextField();
        txtSeats = new javax.swing.JTextField();
        btnModelNo = new javax.swing.JButton();
        btnLocation = new javax.swing.JButton();
        btnCert = new javax.swing.JButton();
        txtModelNo = new javax.swing.JTextField();
        txtLocation = new javax.swing.JTextField();
        chkCert = new javax.swing.JCheckBox();
        btnadvanced = new javax.swing.JButton();

        setBackground(new java.awt.Color(204, 204, 255));

        tableCarFleet.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "Brand", "Manufactured Year", "Min Seats", "Max Seats", "Serial No", "Model No", "Available Location", "Maintenance Certificate Expired", "Available"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, true, true
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(tableCarFleet);

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 18)); // NOI18N
        jLabel1.setText("Search Car Fleet");

        btnBack.setFont(new java.awt.Font("Lucida Grande", 0, 14)); // NOI18N
        btnBack.setText("< BACK");
        btnBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBackActionPerformed(evt);
            }
        });

        labelComments.setFont(new java.awt.Font("Lucida Grande", 1, 14)); // NOI18N
        labelComments.setText("Comments:");

        filter3.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Frequently Asked Questions", "First available passenger car", "Currently available cars", "Car with minimum X and maximum Y seats", "All Brands available", "Last Modified time of Car Fleet" }));
        filter3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                filter3ActionPerformed(evt);
            }
        });

        btnSearch.setFont(new java.awt.Font("Lucida Grande", 1, 12)); // NOI18N
        btnSearch.setText("SEARCH");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });

        btnClearFilter.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnClearFilter.setText("CLEAR FILTER");
        btnClearFilter.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearFilterActionPerformed(evt);
            }
        });

        btnBrand.setText("Search by Brand");
        btnBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnBrandActionPerformed(evt);
            }
        });

        btnYear.setText("Search by Manufactured year");
        btnYear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnYearActionPerformed(evt);
            }
        });

        btnSerialNo.setText("Search by Serial Number");
        btnSerialNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSerialNoActionPerformed(evt);
            }
        });

        txtBrand.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtBrandActionPerformed(evt);
            }
        });

        btnModelNo.setText("Search by Model Number");
        btnModelNo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnModelNoActionPerformed(evt);
            }
        });

        btnLocation.setText("Search by Location");
        btnLocation.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLocationActionPerformed(evt);
            }
        });

        btnCert.setText("Search by Maintenance Certificate Status");
        btnCert.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCertActionPerformed(evt);
            }
        });

        chkCert.setText("Expired");

        btnadvanced.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        btnadvanced.setText("Click here for Advanced filter on current results");
        btnadvanced.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnadvancedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jScrollPane1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(332, 332, 332)
                                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(labelComments)
                                .addGap(18, 18, 18)
                                .addComponent(txtComments, javax.swing.GroupLayout.PREFERRED_SIZE, 983, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(77, 77, 77)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(btnYear)
                                    .addComponent(btnBrand)
                                    .addComponent(btnSerialNo)
                                    .addComponent(filter3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(31, 31, 31)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(txtYear)
                                            .addComponent(txtBrand)
                                            .addComponent(txtSeats, javax.swing.GroupLayout.DEFAULT_SIZE, 97, Short.MAX_VALUE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(btnLocation, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(btnModelNo, javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(btnCert, javax.swing.GroupLayout.Alignment.TRAILING))
                                        .addGap(28, 28, 28)
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(txtModelNo, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addGap(233, 233, 233))
                                            .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addComponent(chkCert)
                                                    .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(btnClearFilter))))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(txtFilter3, javax.swing.GroupLayout.PREFERRED_SIZE, 310, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(btnSearch)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 124, Short.MAX_VALUE)
                                        .addComponent(btnadvanced)))
                                .addGap(36, 36, 36)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnBack, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnBrand)
                                    .addComponent(txtBrand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnYear)
                                    .addComponent(txtYear, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                        .addGap(26, 26, 26)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSerialNo)
                            .addComponent(txtSeats, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnModelNo)
                            .addComponent(txtModelNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnLocation)
                                    .addComponent(txtLocation, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                    .addComponent(btnCert)
                                    .addComponent(chkCert)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnClearFilter, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(14, 14, 14)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 19, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnadvanced, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtFilter3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(filter3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(32, 32, 32)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtComments, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(labelComments, javax.swing.GroupLayout.PREFERRED_SIZE, 38, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(19, 19, 19))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBackActionPerformed
        // TODO add your handling code here:
        carContainer.remove(this);
        CardLayout layout = (CardLayout) carContainer.getLayout();
        layout.previous(carContainer);
    }//GEN-LAST:event_btnBackActionPerformed
    
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed
        // TODO add your handling code here:
        int filter3index = filter3.getSelectedIndex();
        List<Car> seatCar = new ArrayList<>();
        int min=0, max=0;
        if(filter3index == 3) {
            String seats = txtFilter3.getText();
            String[] seatArray = seats.split(":");
            min = Integer.parseInt(seatArray[0]);
            max = Integer.parseInt(seatArray[1]);
            for(Car c: carList) {
                if(c.getMin_seats()>=min && c.getMax_seats()<=max) {
                    seatCar.add(c);
                }
            }
            copyOfCarList = seatCar;
            if(seatCar.size()>0) {
                DefaultTableModel dtm = (DefaultTableModel)tableCarFleet.getModel();
                dtm.setRowCount(0);
                for(Car sc: seatCar) {    
                    resetCarTable(dtm, sc);
                }
                txtComments.setText("Above are the cars with "+seats+" seats");
            }
            else {
                txtComments.setText("Sorry, there are no cars with given seat matrix");
            }
        }
       btnSearch.setEnabled(false); 
       txtFilter3.setEnabled(false);
    }//GEN-LAST:event_btnSearchActionPerformed

    private void btnClearFilterActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearFilterActionPerformed
        // TODO add your handling code here:
        txtFilter3.setText("");
        txtComments.setText("");
        txtLocation.setText("");
        txtModelNo.setText("");
        txtSeats.setText("");
        txtYear.setText("");
        txtBrand.setText("");
        chkCert.setSelected(false);
        populate();
        txtComments.setText("");
        txtComments.setEnabled(false);
        btnSearch.setEnabled(false);
        txtFilter3.setEnabled(false);
    }//GEN-LAST:event_btnClearFilterActionPerformed

    private void filter3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_filter3ActionPerformed
        // TODO add your handling code here:
        int index = filter3.getSelectedIndex();
        Car car;
        txtComments.setEnabled(true);
        if(index == 1) {
            txtFilter3.setText("");
            car = getFirstAvailableCar();
            if(car!=null) {
                DefaultTableModel dtm = (DefaultTableModel)tableCarFleet.getModel();
                dtm.setRowCount(0);
                resetCarTable(dtm, car);
                txtComments.setText("The first available car is displayed above");
            }
            else {
                txtComments.setText("Sorry, there's no available car right now! Please try again later");
            }
            
        }
        else if(index == 2) {
            txtFilter3.setText("");
            int totalCount = carList.size();
            int availCount = 0, unavailCount =0;
            List<Car> availCars = new ArrayList<>();
            availCars = fetchAvailableCars();
            availCount = availCars.size();
            unavailCount = totalCount - availCount;
            copyOfCarList = availCars;
            
            if(availCars.size()!=0) {
                DefaultTableModel dtm = (DefaultTableModel)tableCarFleet.getModel();
                dtm.setRowCount(0);
                copyOfCarList = availCars;
                for(Car avaCar: availCars) {
                    resetCarTable(dtm, avaCar);
                }
                txtComments.setText(availCount + " cars are available and "+unavailCount+" cars are unavailable");
            }
            else {
                txtComments.setText("All the "+totalCount+ " cars are unavailable right now");
            }
        }
        else if(index ==3) {
            btnSearch.setEnabled(true);
            txtFilter3.setEnabled(true);
            txtFilter3.setToolTipText("Please enter x:y and click on Search");
            txtFilter3.setText("Please enter x:y and click on Search");
        }
        else if(index == 4) {
            txtFilter3.setText("");
            findUniqueBrands();
        }
        else if(index==5) {
            if(TimeUtil.modifiedOn.isEmpty())
            txtComments.setText("Your fleet is brand new and not modified yet");
            else 
            txtComments.setText("Your fleet was last modified on "+TimeUtil.modifiedOn);
        }
    }//GEN-LAST:event_filter3ActionPerformed

    private void txtBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtBrandActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtBrandActionPerformed

    private void btnLocationActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLocationActionPerformed
        // TODO add your handling code here:
         String brand = txtLocation.getText();
        List<Car> brandCars = new ArrayList<>();
        if(brand.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter valid location and then search");
        }
        else {
            for(Car c: carList) {
                if(c.getAvailble_city().equals(brand)) {
                    brandCars.add(c);
                }
            }
            copyOfCarList = brandCars;
            DefaultTableModel dtm = (DefaultTableModel)tableCarFleet.getModel();
            dtm.setRowCount(0);
            for(Car car: brandCars) {
                resetCarTable(dtm, car);
            }
            if(brandCars.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Sorry, we did not find any car for the given input");
            }
        }
    }//GEN-LAST:event_btnLocationActionPerformed

    private void btnBrandActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnBrandActionPerformed
        // TODO add your handling code here:
        String brand = txtBrand.getText();
        List<Car> brandCars = new ArrayList<>();
        if(brand.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter valid text and then search");
        }
        else {
            for(Car c: carList) {
                if(c.getBrand().equals(brand)) {
                    brandCars.add(c);
                }
            }
            copyOfCarList = brandCars;
            DefaultTableModel dtm = (DefaultTableModel)tableCarFleet.getModel();
            dtm.setRowCount(0);
            for(Car car: brandCars) {
                resetCarTable(dtm, car);
            }
            if(brandCars.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Sorry, we did not find any car for the given input");
            }
        }
    }//GEN-LAST:event_btnBrandActionPerformed

    private void btnYearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnYearActionPerformed
        // TODO add your handling code here:
        String year = txtYear.getText();
        int yr=0;
        List<Car> brandCars = new ArrayList<>();
        if(year.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter valid year and then search");
            
        }
        else {
            try{
                Integer.parseInt(year);
                yr= Integer.parseInt(year);
                for(Car c: carList) {
                    if(c.getManufactured_year() == yr) {
                        brandCars.add(c);
                    }
                }
                DefaultTableModel dtm = (DefaultTableModel)tableCarFleet.getModel();
                dtm.setRowCount(0);
                copyOfCarList = brandCars;
                for(Car car: brandCars) {
                    resetCarTable(dtm, car);
                }
                if(brandCars.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Sorry, we did not find any car for the given input");
                }
            }
            catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please enter valid numeral for year");
            }
            
        }
    }//GEN-LAST:event_btnYearActionPerformed

    private void btnSerialNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSerialNoActionPerformed
        // TODO add your handling code here:
        String serialNo = txtSeats.getText();
        int slNo=0;
        List<Car> brandCars = new ArrayList<>();
        if(serialNo.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter valid Serial Number and then search");
            
        }
        else {
            try{
                Integer.parseInt(serialNo);
                slNo= Integer.parseInt(serialNo);
                for(Car c: carList) {
                    if(c.getSerial_num()== slNo) {
                        brandCars.add(c);
                    }
                }
                DefaultTableModel dtm = (DefaultTableModel)tableCarFleet.getModel();
                dtm.setRowCount(0);
                copyOfCarList = brandCars;
                for(Car car: brandCars) {
                    resetCarTable(dtm, car);
                }
                if(brandCars.isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Sorry, we did not find any car for the given input");
                }
            }
            catch(NumberFormatException e) {
                JOptionPane.showMessageDialog(null, "Please enter valid numeral for Serial Number");
            }
            
        }
    }//GEN-LAST:event_btnSerialNoActionPerformed

    private void btnModelNoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnModelNoActionPerformed
        // TODO add your handling code here:
        String brand = txtModelNo.getText();
        List<Car> brandCars = new ArrayList<>();
        if(brand.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Please enter valid model number and then search");
        }
        else {
            for(Car c: carList) {
                if(c.getModel_num().equals(brand)) {
                    brandCars.add(c);
                }
            }
            DefaultTableModel dtm = (DefaultTableModel)tableCarFleet.getModel();
            dtm.setRowCount(0);
            copyOfCarList = brandCars;
            for(Car car: brandCars) {
                resetCarTable(dtm, car);
            }
            if(brandCars.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Sorry, we did not find any car for the given input");
            }
        }
    }//GEN-LAST:event_btnModelNoActionPerformed

    private void btnCertActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCertActionPerformed
        // TODO add your handling code here:
        Boolean certified =true;
        if(chkCert.isSelected()) {
            certified = false;
        }
        List<Car> brandCars = new ArrayList<>();
        
         
            for(Car c: carList) {
                if(c.isMaintenance_certificate() == certified) {
                    brandCars.add(c);
                }
            }
            DefaultTableModel dtm = (DefaultTableModel)tableCarFleet.getModel();
            dtm.setRowCount(0);
            copyOfCarList = brandCars;
            for(Car car: brandCars) {
                resetCarTable(dtm, car);
            }
            if(brandCars.isEmpty()) {
                JOptionPane.showMessageDialog(null, "Sorry, we did not find any car for the given input");
            }
    }//GEN-LAST:event_btnCertActionPerformed

    private void btnadvancedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnadvancedActionPerformed
        // TODO add your handling code here:
        EnhancedSearchPanel panel = new EnhancedSearchPanel(carContainer, copyOfCarList);
        carContainer.add("EnhancedSearchPanel", panel);
        CardLayout layout = (CardLayout) carContainer.getLayout();
        layout.next(carContainer);
    }//GEN-LAST:event_btnadvancedActionPerformed

    private void findUniqueBrands() {
        Set<String> uniqueBrands = new HashSet<String>();
        for(Car c: carList) {
            uniqueBrands.add(c.getBrand());
        }
        if(uniqueBrands.size()==0) {
            txtComments.setText("There are no registered cars right now!");
        }
        else {
            String brands="";
            for(String s: uniqueBrands) {
                brands+=s+",";
            }
            populate();
            txtComments.setText("The cars registered with us are from \n"+brands+" and \nabove are the car details of each.");
        }
    }
    
    private List<Car> fetchAvailableCars() {
        List<Car> availablecars = new ArrayList<>();
        for(Car car: carList) {
            if(car.isAvailable()) {
                availablecars.add(car);
            }
        }
        return availablecars;
    }
    
    private void resetCarTable(DefaultTableModel dtm, Car car) {
        Object[] row = new Object[dtm.getColumnCount()];
            row[0]=car;
            row[1]=car.getManufactured_year();
            row[2]=car.getMin_seats();
            row[3]=car.getMax_seats();
            row[4]=car.getSerial_num();
            row[5]=car.getModel_num();
            row[6]=car.getAvailble_city();
            if(car.isMaintenance_certificate()){
                row[7]="Active";
            }
            else
                row[7]="Expired";
            if(car.isAvailable()) {
                row[8] = "yes";
            }
            dtm.addRow(row);    
    }
    
    private Car getFirstAvailableCar() {
        for(Car car: carList) {
            if(car.isAvailable()) {
                return car;
            }
        }
        return null;
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnBack;
    private javax.swing.JButton btnBrand;
    private javax.swing.JButton btnCert;
    private javax.swing.JButton btnClearFilter;
    private javax.swing.JButton btnLocation;
    private javax.swing.JButton btnModelNo;
    private javax.swing.JButton btnSearch;
    private javax.swing.JButton btnSerialNo;
    private javax.swing.JButton btnYear;
    private javax.swing.JButton btnadvanced;
    private javax.swing.JCheckBox chkCert;
    private javax.swing.JComboBox<String> filter3;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel labelComments;
    private javax.swing.JTable tableCarFleet;
    private javax.swing.JTextField txtBrand;
    private javax.swing.JTextField txtComments;
    private javax.swing.JTextField txtFilter3;
    private javax.swing.JTextField txtLocation;
    private javax.swing.JTextField txtModelNo;
    private javax.swing.JTextField txtSeats;
    private javax.swing.JTextField txtYear;
    // End of variables declaration//GEN-END:variables
}
